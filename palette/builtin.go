package palette

import (
	"errors"
	"fmt"
	"image"
	"image/color"
	"io/fs"
	"maps"
	"os"
	"slices"
	"strings"
)

func LoadPaletteFromImage(i image.Image) color.Palette {
	m := make(map[color.Color]struct{})
	b := i.Bounds()
	for x := b.Min.X; x < b.Max.X; x++ {
		for y := b.Min.Y; y < b.Max.Y; y++ {
			m[i.At(x, y)] = struct{}{}
		}
	}

	return slices.Collect(maps.Keys(m))
}

func SortPalette(p color.Palette) {
	slices.SortStableFunc(p, func(c1, c2 color.Color) int {
		r1, g1, b1, a1 := c1.RGBA()
		r2, g2, b2, a2 := c2.RGBA()

		switch {
		case r1 < r2:
			return -1
		case r1 > r2:
			return 1
		case g1 < g2:
			return -1
		case g1 > g2:
			return 1
		case b1 < b2:
			return -1
		case b1 > b2:
			return 1
		case a1 < a2:
			return -1
		case a1 > a2:
			return 1
		default:
			return 0
		}
	})
}

func LoadPalette(name string) (color.Palette, error) {
	if _, err := os.Stat(name); err != nil {
		if !errors.Is(err, fs.ErrNotExist) {
			return nil, fmt.Errorf("could not check palette file info: %w", err)
		}
	} else {
		return LoadPaletteFromFile(name)
	}

	extName := fmt.Sprintf("%s.pal", name)
	if _, err := os.Stat(extName); err != nil {
		if !errors.Is(err, fs.ErrNotExist) {
			return nil, fmt.Errorf("could not check palette file info: %w", err)
		}
	} else {
		return LoadPaletteFromFile(extName)
	}

	switch strings.ToLower(name) {
	case "bw":
		return BW, nil
	case "spectra6":
		return Spectra6, nil
	case "mattdm6":
		return Mattdm6, nil
	case "gray16":
		return Gray16, nil
	case "vga16":
		return VGA16, nil
	case "vga256":
		return VGA256, nil
	default:
		return nil, fmt.Errorf("palette not found: %q", name)
	}
}

func LoadPaletteFromFile(name string) (color.Palette, error) {
	file, err := os.Open(name)
	if err != nil {
		return nil, fmt.Errorf("could not open palette file %q: %w", name, err)
	}

	pals, err := ReadFrom(file)
	if err != nil {
		return nil, fmt.Errorf("could not load palette from file %q: %w", name, err)
	}

	return slices.Concat(pals...), nil
}

func LoadLabPalette(name string) (*Lab, error) {
	if pal, err := LoadPalette(name); err != nil {
		return nil, err
	} else {
		return NewLabPalette(pal), nil
	}
}

func LoadLinearRGBAPalette(name string) (*LinearRGBA, error) {
	if pal, err := LoadPalette(name); err != nil {
		return nil, err
	} else {
		return NewLinearRGBAPalette(pal), nil
	}
}

var (
	BW = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0xFF},
		color.RGBA{0xFF, 0xFF, 0xFF, 0xFF},
	}
	BWLab, _        = LoadLabPalette("bw")
	BWLinearRGBA, _ = LoadLinearRGBAPalette("bw")
)

// Spectra 6 basic colors - black, white, red, yellow, green, blue
var (
	Spectra6 = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0xFF},
		color.RGBA{0xFF, 0xFF, 0xFF, 0xFF},
		color.RGBA{0xFF, 0x00, 0x00, 0xFF},
		color.RGBA{0xFF, 0xFF, 0x00, 0xFF},
		color.RGBA{0x00, 0xFF, 0x00, 0xFF},
		color.RGBA{0x00, 0x00, 0xFF, 0xFF},
	}
	Spectra6Lab, _        = LoadLabPalette("spectra6")
	Spectra6LinearRGBA, _ = LoadLinearRGBAPalette("spectra6")
)

// https://forums.pimoroni.com/t/what-rgb-colors-are-you-using-for-the-colors-on-the-impression-spectra-6/27942
// red	  #a02020
// yellow #f0e050
// green  #608050
// blue   #5080b8
var (
	Mattdm6 = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0xFF},
		color.RGBA{0xFF, 0xFF, 0xFF, 0xFF},
		color.RGBA{0xA0, 0x20, 0x20, 0xFF},
		color.RGBA{0xF0, 0xE0, 0x50, 0xFF},
		color.RGBA{0x60, 0x80, 0x50, 0xFF},
		color.RGBA{0x50, 0x80, 0xB8, 0xFF},
	}
	Mattdm6Lab, _        = LoadLabPalette("mattdm6")
	Mattdm6LinearRGBA, _ = LoadLinearRGBAPalette("mattdm6")
)

var (
	Gray16 = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0xFF},
		color.RGBA{0x11, 0x11, 0x11, 0xFF},
		color.RGBA{0x22, 0x22, 0x22, 0xFF},
		color.RGBA{0x33, 0x33, 0x33, 0xFF},
		color.RGBA{0x44, 0x44, 0x44, 0xFF},
		color.RGBA{0x55, 0x55, 0x55, 0xFF},
		color.RGBA{0x66, 0x66, 0x66, 0xFF},
		color.RGBA{0x77, 0x77, 0x77, 0xFF},
		color.RGBA{0x88, 0x88, 0x88, 0xFF},
		color.RGBA{0x99, 0x99, 0x99, 0xFF},
		color.RGBA{0xAA, 0xAA, 0xAA, 0xFF},
		color.RGBA{0xBB, 0xBB, 0xBB, 0xFF},
		color.RGBA{0xCC, 0xCC, 0xCC, 0xFF},
		color.RGBA{0xDD, 0xDD, 0xDD, 0xFF},
		color.RGBA{0xEE, 0xEE, 0xEE, 0xFF},
		color.RGBA{0xFF, 0xFF, 0xFF, 0xFF},
	}
	Gray16Lab, _        = LoadLabPalette("gray16")
	Gray16LinearRGBA, _ = LoadLinearRGBAPalette("gray16")
)

var (
	VGA16 = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0xFF},
		color.RGBA{0x80, 0x00, 0x00, 0xFF},
		color.RGBA{0x00, 0x80, 0x00, 0xFF},
		color.RGBA{0x80, 0x80, 0x00, 0xFF},
		color.RGBA{0x00, 0x00, 0x80, 0xFF},
		color.RGBA{0x80, 0x00, 0x80, 0xFF},
		color.RGBA{0x00, 0x80, 0x80, 0xFF},
		color.RGBA{0xC0, 0xC0, 0xC0, 0xFF},
		color.RGBA{0x80, 0x80, 0x80, 0xFF},
		color.RGBA{0xFF, 0x00, 0x00, 0xFF},
		color.RGBA{0x00, 0xFF, 0x00, 0xFF},
		color.RGBA{0xFF, 0xFF, 0x00, 0xFF},
		color.RGBA{0x00, 0x00, 0xFF, 0xFF},
		color.RGBA{0xFF, 0x00, 0xFF, 0xFF},
		color.RGBA{0x00, 0xFF, 0xFF, 0xFF},
		color.RGBA{0xFF, 0xFF, 0xFF, 0xFF},
	}
	VGA16Lab, _        = LoadLabPalette("vga16")
	VGA16LinearRGBA, _ = LoadLinearRGBAPalette("vga16")
)

var (
	VGA256 = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0xFF},
		color.RGBA{0x00, 0x00, 0xAA, 0xFF},
		color.RGBA{0x00, 0xAA, 0x00, 0xFF},
		color.RGBA{0x00, 0xAA, 0xAA, 0xFF},
		color.RGBA{0xAA, 0x00, 0x00, 0xFF},
		color.RGBA{0xAA, 0x00, 0xAA, 0xFF},
		color.RGBA{0xAA, 0x55, 0x00, 0xFF},
		color.RGBA{0xAA, 0xAA, 0xAA, 0xFF},
		color.RGBA{0x55, 0x55, 0x55, 0xFF},
		color.RGBA{0x55, 0x55, 0xFF, 0xFF},
		color.RGBA{0x55, 0xFF, 0x55, 0xFF},
		color.RGBA{0x55, 0xFF, 0xFF, 0xFF},
		color.RGBA{0xFF, 0x55, 0x55, 0xFF},
		color.RGBA{0xFF, 0x55, 0xFF, 0xFF},
		color.RGBA{0xFF, 0xFF, 0x55, 0xFF},
		color.RGBA{0xFF, 0xFF, 0xFF, 0xFF},
		color.RGBA{0x00, 0x00, 0x00, 0xFF},
		color.RGBA{0x14, 0x14, 0x14, 0xFF},
		color.RGBA{0x20, 0x20, 0x20, 0xFF},
		color.RGBA{0x2C, 0x2C, 0x2C, 0xFF},
		color.RGBA{0x38, 0x38, 0x38, 0xFF},
		color.RGBA{0x45, 0x45, 0x45, 0xFF},
		color.RGBA{0x51, 0x51, 0x51, 0xFF},
		color.RGBA{0x61, 0x61, 0x61, 0xFF},
		color.RGBA{0x71, 0x71, 0x71, 0xFF},
		color.RGBA{0x82, 0x82, 0x82, 0xFF},
		color.RGBA{0x92, 0x92, 0x92, 0xFF},
		color.RGBA{0xA2, 0xA2, 0xA2, 0xFF},
		color.RGBA{0xB6, 0xB6, 0xB6, 0xFF},
		color.RGBA{0xCB, 0xCB, 0xCB, 0xFF},
		color.RGBA{0xE3, 0xE3, 0xE3, 0xFF},
		color.RGBA{0xFF, 0xFF, 0xFF, 0xFF},
		color.RGBA{0x00, 0x00, 0xFF, 0xFF},
		color.RGBA{0x41, 0x00, 0xFF, 0xFF},
		color.RGBA{0x7D, 0x00, 0xFF, 0xFF},
		color.RGBA{0xBE, 0x00, 0xFF, 0xFF},
		color.RGBA{0xFF, 0x00, 0xFF, 0xFF},
		color.RGBA{0xFF, 0x00, 0xBE, 0xFF},
		color.RGBA{0xFF, 0x00, 0x7D, 0xFF},
		color.RGBA{0xFF, 0x00, 0x41, 0xFF},
		color.RGBA{0xFF, 0x00, 0x00, 0xFF},
		color.RGBA{0xFF, 0x41, 0x00, 0xFF},
		color.RGBA{0xFF, 0x7D, 0x00, 0xFF},
		color.RGBA{0xFF, 0xBE, 0x00, 0xFF},
		color.RGBA{0xFF, 0xFF, 0x00, 0xFF},
		color.RGBA{0xBE, 0xFF, 0x00, 0xFF},
		color.RGBA{0x7D, 0xFF, 0x00, 0xFF},
		color.RGBA{0x41, 0xFF, 0x00, 0xFF},
		color.RGBA{0x00, 0xFF, 0x00, 0xFF},
		color.RGBA{0x00, 0xFF, 0x41, 0xFF},
		color.RGBA{0x00, 0xFF, 0x7D, 0xFF},
		color.RGBA{0x00, 0xFF, 0xBE, 0xFF},
		color.RGBA{0x00, 0xFF, 0xFF, 0xFF},
		color.RGBA{0x00, 0xBE, 0xFF, 0xFF},
		color.RGBA{0x00, 0x7D, 0xFF, 0xFF},
		color.RGBA{0x00, 0x41, 0xFF, 0xFF},
		color.RGBA{0x7D, 0x7D, 0xFF, 0xFF},
		color.RGBA{0x9E, 0x7D, 0xFF, 0xFF},
		color.RGBA{0xBE, 0x7D, 0xFF, 0xFF},
		color.RGBA{0xDF, 0x7D, 0xFF, 0xFF},
		color.RGBA{0xFF, 0x7D, 0xFF, 0xFF},
		color.RGBA{0xFF, 0x7D, 0xDF, 0xFF},
		color.RGBA{0xFF, 0x7D, 0xBE, 0xFF},
		color.RGBA{0xFF, 0x7D, 0x9E, 0xFF},
		color.RGBA{0xFF, 0x7D, 0x7D, 0xFF},
		color.RGBA{0xFF, 0x9E, 0x7D, 0xFF},
		color.RGBA{0xFF, 0xBE, 0x7D, 0xFF},
		color.RGBA{0xFF, 0xDF, 0x7D, 0xFF},
		color.RGBA{0xFF, 0xFF, 0x7D, 0xFF},
		color.RGBA{0xDF, 0xFF, 0x7D, 0xFF},
		color.RGBA{0xBE, 0xFF, 0x7D, 0xFF},
		color.RGBA{0x9E, 0xFF, 0x7D, 0xFF},
		color.RGBA{0x7D, 0xFF, 0x7D, 0xFF},
		color.RGBA{0x7D, 0xFF, 0x9E, 0xFF},
		color.RGBA{0x7D, 0xFF, 0xBE, 0xFF},
		color.RGBA{0x7D, 0xFF, 0xDF, 0xFF},
		color.RGBA{0x7D, 0xFF, 0xFF, 0xFF},
		color.RGBA{0x7D, 0xDF, 0xFF, 0xFF},
		color.RGBA{0x7D, 0xBE, 0xFF, 0xFF},
		color.RGBA{0x7D, 0x9E, 0xFF, 0xFF},
		color.RGBA{0xB6, 0xB6, 0xFF, 0xFF},
		color.RGBA{0xC7, 0xB6, 0xFF, 0xFF},
		color.RGBA{0xDB, 0xB6, 0xFF, 0xFF},
		color.RGBA{0xEB, 0xB6, 0xFF, 0xFF},
		color.RGBA{0xFF, 0xB6, 0xFF, 0xFF},
		color.RGBA{0xFF, 0xB6, 0xEB, 0xFF},
		color.RGBA{0xFF, 0xB6, 0xDB, 0xFF},
		color.RGBA{0xFF, 0xB6, 0xC7, 0xFF},
		color.RGBA{0xFF, 0xB6, 0xB6, 0xFF},
		color.RGBA{0xFF, 0xC7, 0xB6, 0xFF},
		color.RGBA{0xFF, 0xDB, 0xB6, 0xFF},
		color.RGBA{0xFF, 0xEB, 0xB6, 0xFF},
		color.RGBA{0xFF, 0xFF, 0xB6, 0xFF},
		color.RGBA{0xEB, 0xFF, 0xB6, 0xFF},
		color.RGBA{0xDB, 0xFF, 0xB6, 0xFF},
		color.RGBA{0xC7, 0xFF, 0xB6, 0xFF},
		color.RGBA{0xB6, 0xFF, 0xB6, 0xFF},
		color.RGBA{0xB6, 0xFF, 0xC7, 0xFF},
		color.RGBA{0xB6, 0xFF, 0xDB, 0xFF},
		color.RGBA{0xB6, 0xFF, 0xEB, 0xFF},
		color.RGBA{0xB6, 0xFF, 0xFF, 0xFF},
		color.RGBA{0xB6, 0xEB, 0xFF, 0xFF},
		color.RGBA{0xB6, 0xDB, 0xFF, 0xFF},
		color.RGBA{0xB6, 0xC7, 0xFF, 0xFF},
		color.RGBA{0x00, 0x00, 0x71, 0xFF},
		color.RGBA{0x1C, 0x00, 0x71, 0xFF},
		color.RGBA{0x38, 0x00, 0x71, 0xFF},
		color.RGBA{0x55, 0x00, 0x71, 0xFF},
		color.RGBA{0x71, 0x00, 0x71, 0xFF},
		color.RGBA{0x71, 0x00, 0x55, 0xFF},
		color.RGBA{0x71, 0x00, 0x38, 0xFF},
		color.RGBA{0x71, 0x00, 0x1C, 0xFF},
		color.RGBA{0x71, 0x00, 0x00, 0xFF},
		color.RGBA{0x71, 0x1C, 0x00, 0xFF},
		color.RGBA{0x71, 0x38, 0x00, 0xFF},
		color.RGBA{0x71, 0x55, 0x00, 0xFF},
		color.RGBA{0x71, 0x71, 0x00, 0xFF},
		color.RGBA{0x55, 0x71, 0x00, 0xFF},
		color.RGBA{0x38, 0x71, 0x00, 0xFF},
		color.RGBA{0x1C, 0x71, 0x00, 0xFF},
		color.RGBA{0x00, 0x71, 0x00, 0xFF},
		color.RGBA{0x00, 0x71, 0x1C, 0xFF},
		color.RGBA{0x00, 0x71, 0x38, 0xFF},
		color.RGBA{0x00, 0x71, 0x55, 0xFF},
		color.RGBA{0x00, 0x71, 0x71, 0xFF},
		color.RGBA{0x00, 0x55, 0x71, 0xFF},
		color.RGBA{0x00, 0x38, 0x71, 0xFF},
		color.RGBA{0x00, 0x1C, 0x71, 0xFF},
		color.RGBA{0x38, 0x38, 0x71, 0xFF},
		color.RGBA{0x45, 0x38, 0x71, 0xFF},
		color.RGBA{0x55, 0x38, 0x71, 0xFF},
		color.RGBA{0x61, 0x38, 0x71, 0xFF},
		color.RGBA{0x71, 0x38, 0x71, 0xFF},
		color.RGBA{0x71, 0x38, 0x61, 0xFF},
		color.RGBA{0x71, 0x38, 0x55, 0xFF},
		color.RGBA{0x71, 0x38, 0x45, 0xFF},
		color.RGBA{0x71, 0x38, 0x38, 0xFF},
		color.RGBA{0x71, 0x45, 0x38, 0xFF},
		color.RGBA{0x71, 0x55, 0x38, 0xFF},
		color.RGBA{0x71, 0x61, 0x38, 0xFF},
		color.RGBA{0x71, 0x71, 0x38, 0xFF},
		color.RGBA{0x61, 0x71, 0x38, 0xFF},
		color.RGBA{0x55, 0x71, 0x38, 0xFF},
		color.RGBA{0x45, 0x71, 0x38, 0xFF},
		color.RGBA{0x38, 0x71, 0x38, 0xFF},
		color.RGBA{0x38, 0x71, 0x45, 0xFF},
		color.RGBA{0x38, 0x71, 0x55, 0xFF},
		color.RGBA{0x38, 0x71, 0x61, 0xFF},
		color.RGBA{0x38, 0x71, 0x71, 0xFF},
		color.RGBA{0x38, 0x61, 0x71, 0xFF},
		color.RGBA{0x38, 0x55, 0x71, 0xFF},
		color.RGBA{0x38, 0x45, 0x71, 0xFF},
		color.RGBA{0x51, 0x51, 0x71, 0xFF},
		color.RGBA{0x59, 0x51, 0x71, 0xFF},
		color.RGBA{0x61, 0x51, 0x71, 0xFF},
		color.RGBA{0x69, 0x51, 0x71, 0xFF},
		color.RGBA{0x71, 0x51, 0x71, 0xFF},
		color.RGBA{0x71, 0x51, 0x69, 0xFF},
		color.RGBA{0x71, 0x51, 0x61, 0xFF},
		color.RGBA{0x71, 0x51, 0x59, 0xFF},
		color.RGBA{0x71, 0x51, 0x51, 0xFF},
		color.RGBA{0x71, 0x59, 0x51, 0xFF},
		color.RGBA{0x71, 0x61, 0x51, 0xFF},
		color.RGBA{0x71, 0x69, 0x51, 0xFF},
		color.RGBA{0x71, 0x71, 0x51, 0xFF},
		color.RGBA{0x69, 0x71, 0x51, 0xFF},
		color.RGBA{0x61, 0x71, 0x51, 0xFF},
		color.RGBA{0x59, 0x71, 0x51, 0xFF},
		color.RGBA{0x51, 0x71, 0x51, 0xFF},
		color.RGBA{0x51, 0x71, 0x59, 0xFF},
		color.RGBA{0x51, 0x71, 0x61, 0xFF},
		color.RGBA{0x51, 0x71, 0x69, 0xFF},
		color.RGBA{0x51, 0x71, 0x71, 0xFF},
		color.RGBA{0x51, 0x69, 0x71, 0xFF},
		color.RGBA{0x51, 0x61, 0x71, 0xFF},
		color.RGBA{0x51, 0x59, 0x71, 0xFF},
		color.RGBA{0x00, 0x00, 0x41, 0xFF},
		color.RGBA{0x10, 0x00, 0x41, 0xFF},
		color.RGBA{0x20, 0x00, 0x41, 0xFF},
		color.RGBA{0x30, 0x00, 0x41, 0xFF},
		color.RGBA{0x41, 0x00, 0x41, 0xFF},
		color.RGBA{0x41, 0x00, 0x30, 0xFF},
		color.RGBA{0x41, 0x00, 0x20, 0xFF},
		color.RGBA{0x41, 0x00, 0x10, 0xFF},
		color.RGBA{0x41, 0x00, 0x00, 0xFF},
		color.RGBA{0x41, 0x10, 0x00, 0xFF},
		color.RGBA{0x41, 0x20, 0x00, 0xFF},
		color.RGBA{0x41, 0x30, 0x00, 0xFF},
		color.RGBA{0x41, 0x41, 0x00, 0xFF},
		color.RGBA{0x30, 0x41, 0x00, 0xFF},
		color.RGBA{0x20, 0x41, 0x00, 0xFF},
		color.RGBA{0x10, 0x41, 0x00, 0xFF},
		color.RGBA{0x00, 0x41, 0x00, 0xFF},
		color.RGBA{0x00, 0x41, 0x10, 0xFF},
		color.RGBA{0x00, 0x41, 0x20, 0xFF},
		color.RGBA{0x00, 0x41, 0x30, 0xFF},
		color.RGBA{0x00, 0x41, 0x41, 0xFF},
		color.RGBA{0x00, 0x30, 0x41, 0xFF},
		color.RGBA{0x00, 0x20, 0x41, 0xFF},
		color.RGBA{0x00, 0x10, 0x41, 0xFF},
		color.RGBA{0x20, 0x20, 0x41, 0xFF},
		color.RGBA{0x28, 0x20, 0x41, 0xFF},
		color.RGBA{0x30, 0x20, 0x41, 0xFF},
		color.RGBA{0x38, 0x20, 0x41, 0xFF},
		color.RGBA{0x41, 0x20, 0x41, 0xFF},
		color.RGBA{0x41, 0x20, 0x38, 0xFF},
		color.RGBA{0x41, 0x20, 0x30, 0xFF},
		color.RGBA{0x41, 0x20, 0x28, 0xFF},
		color.RGBA{0x41, 0x20, 0x20, 0xFF},
		color.RGBA{0x41, 0x28, 0x20, 0xFF},
		color.RGBA{0x41, 0x30, 0x20, 0xFF},
		color.RGBA{0x41, 0x38, 0x20, 0xFF},
		color.RGBA{0x41, 0x41, 0x20, 0xFF},
		color.RGBA{0x38, 0x41, 0x20, 0xFF},
		color.RGBA{0x30, 0x41, 0x20, 0xFF},
		color.RGBA{0x28, 0x41, 0x20, 0xFF},
		color.RGBA{0x20, 0x41, 0x20, 0xFF},
		color.RGBA{0x20, 0x41, 0x28, 0xFF},
		color.RGBA{0x20, 0x41, 0x30, 0xFF},
		color.RGBA{0x20, 0x41, 0x38, 0xFF},
		color.RGBA{0x20, 0x41, 0x41, 0xFF},
		color.RGBA{0x20, 0x38, 0x41, 0xFF},
		color.RGBA{0x20, 0x30, 0x41, 0xFF},
		color.RGBA{0x20, 0x28, 0x41, 0xFF},
		color.RGBA{0x2C, 0x2C, 0x41, 0xFF},
		color.RGBA{0x30, 0x2C, 0x41, 0xFF},
		color.RGBA{0x34, 0x2C, 0x41, 0xFF},
		color.RGBA{0x3C, 0x2C, 0x41, 0xFF},
		color.RGBA{0x41, 0x2C, 0x41, 0xFF},
		color.RGBA{0x41, 0x2C, 0x3C, 0xFF},
		color.RGBA{0x41, 0x2C, 0x34, 0xFF},
		color.RGBA{0x41, 0x2C, 0x30, 0xFF},
		color.RGBA{0x41, 0x2C, 0x2C, 0xFF},
		color.RGBA{0x41, 0x30, 0x2C, 0xFF},
		color.RGBA{0x41, 0x34, 0x2C, 0xFF},
		color.RGBA{0x41, 0x3C, 0x2C, 0xFF},
		color.RGBA{0x41, 0x41, 0x2C, 0xFF},
		color.RGBA{0x3C, 0x41, 0x2C, 0xFF},
		color.RGBA{0x34, 0x41, 0x2C, 0xFF},
		color.RGBA{0x30, 0x41, 0x2C, 0xFF},
		color.RGBA{0x2C, 0x41, 0x2C, 0xFF},
		color.RGBA{0x2C, 0x41, 0x30, 0xFF},
		color.RGBA{0x2C, 0x41, 0x34, 0xFF},
		color.RGBA{0x2C, 0x41, 0x3C, 0xFF},
		color.RGBA{0x2C, 0x41, 0x41, 0xFF},
		color.RGBA{0x2C, 0x3C, 0x41, 0xFF},
		color.RGBA{0x2C, 0x34, 0x41, 0xFF},
		color.RGBA{0x2C, 0x30, 0x41, 0xFF},
		// color.RGBA{0x00, 0x00, 0x00, 0xFF},
		// color.RGBA{0x00, 0x00, 0x00, 0xFF},
		// color.RGBA{0x00, 0x00, 0x00, 0xFF},
		// color.RGBA{0x00, 0x00, 0x00, 0xFF},
		// color.RGBA{0x00, 0x00, 0x00, 0xFF},
		// color.RGBA{0x00, 0x00, 0x00, 0xFF},
		// color.RGBA{0x00, 0x00, 0x00, 0xFF},
		// color.RGBA{0x00, 0x00, 0x00, 0xFF},
	}
	VGA256Lab, _        = LoadLabPalette("vga256")
	VGA256LinearRGBA, _ = LoadLinearRGBAPalette("vga256")
)

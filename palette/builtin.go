package palette

import (
	"errors"
	"fmt"
	"image"
	"image/color"
	"io/fs"
	"maps"
	"os"
	"slices"
	"strings"
)

func LoadPaletteFromImage(i image.Image) color.Palette {
	m := make(map[color.Color]struct{})
	b := i.Bounds()
	for x := b.Min.X; x < b.Max.X; x++ {
		for y := b.Min.Y; y < b.Max.Y; y++ {
			m[i.At(x, y)] = struct{}{}
		}
	}

	return slices.Collect(maps.Keys(m))
}

func SortPalette(p color.Palette) {
	slices.SortStableFunc(p, func(c1, c2 color.Color) int {
		r1, g1, b1, a1 := c1.RGBA()
		r2, g2, b2, a2 := c2.RGBA()

		switch {
		case r1 < r2:
			return -1
		case r1 > r2:
			return 1
		case g1 < g2:
			return -1
		case g1 > g2:
			return 1
		case b1 < b2:
			return -1
		case b1 > b2:
			return 1
		case a1 < a2:
			return -1
		case a1 > a2:
			return 1
		default:
			return 0
		}
	})
}

func LoadPalette(name string) (color.Palette, error) {
	if _, err := os.Stat(name); err != nil {
		if !errors.Is(err, fs.ErrNotExist) {
			return nil, fmt.Errorf("could not load palette: %w", err)
		}

		if _, err := os.Stat(fmt.Sprintf("%s.pal", name)); err != nil {
			if !errors.Is(err, fs.ErrNotExist) {
				return nil, fmt.Errorf("could not load palette: %w", err)
			}
		}

		switch strings.ToLower(name) {
		case "spectra6":
			return Spectra6, nil
		case "mattdm6":
			return Mattdm6, nil
		case "vga16":
			return VGA16, nil
		case "vga256":
			return VGA256, nil
		}
	}

	return nil, nil
}

func LoadLabPalette(name string) (*Lab, error) {
	if pal, err := LoadPalette(name); err != nil {
		return nil, err
	} else {
		return NewLabPalette(pal), nil
	}
}

func LoadLinearRGBAPalette(name string) (*LinearRGBA, error) {
	if pal, err := LoadPalette(name); err != nil {
		return nil, err
	} else {
		return NewLinearRGBAPalette(pal), nil
	}
}

// Spectra 6 basic colors - black, white, red, yellow, green, blue
var (
	Spectra6 = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0xFF, 0xFF, 0xFF, 0x00},
		color.RGBA{0xFF, 0x00, 0x00, 0x00},
		color.RGBA{0xFF, 0xFF, 0x00, 0x00},
		color.RGBA{0x00, 0xFF, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0xFF, 0x00},
	}
	Spectra6Lab, _        = LoadLabPalette("spectra6")
	Spectra6LinearRGBA, _ = LoadLinearRGBAPalette("spectra6")
)

// https://forums.pimoroni.com/t/what-rgb-colors-are-you-using-for-the-colors-on-the-impression-spectra-6/27942
// red	  #a02020
// yellow #f0e050
// green  #608050
// blue   #5080b8
var (
	Mattdm6 = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0xFF, 0xFF, 0xFF, 0x00},
		color.RGBA{0xA0, 0x20, 0x20, 0x00},
		color.RGBA{0xF0, 0xE0, 0x50, 0x00},
		color.RGBA{0x60, 0x80, 0x50, 0x00},
		color.RGBA{0x50, 0x80, 0xB8, 0x00},
	}
	Mattdm6Lab, _        = LoadLabPalette("mattdm6")
	Mattdm6LinearRGBA, _ = LoadLinearRGBAPalette("mattdm6")
)

var (
	VGA16 = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x80, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0x80, 0x00, 0x00},
		color.RGBA{0x80, 0x80, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0x80, 0x00},
		color.RGBA{0x80, 0x00, 0x80, 0x00},
		color.RGBA{0x00, 0x80, 0x80, 0x00},
		color.RGBA{0xC0, 0xC0, 0xC0, 0x00},
		color.RGBA{0x80, 0x80, 0x80, 0x00},
		color.RGBA{0xFF, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0xFF, 0x00, 0x00},
		color.RGBA{0xFF, 0xFF, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0xFF, 0x00},
		color.RGBA{0xFF, 0x00, 0xFF, 0x00},
		color.RGBA{0x00, 0xFF, 0xFF, 0x00},
		color.RGBA{0xFF, 0xFF, 0xFF, 0x00},
	}
	VGA16Lab, _        = LoadLabPalette("vga16")
	VGA16LinearRGBA, _ = LoadLinearRGBAPalette("vga16")
)

var (
	VGA256 = color.Palette{
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0xaa, 0x00},
		color.RGBA{0x00, 0xaa, 0x00, 0x00},
		color.RGBA{0x00, 0xaa, 0xaa, 0x00},
		color.RGBA{0xaa, 0x00, 0x00, 0x00},
		color.RGBA{0xaa, 0x00, 0xaa, 0x00},
		color.RGBA{0xaa, 0x55, 0x00, 0x00},
		color.RGBA{0xaa, 0xaa, 0xaa, 0x00},
		color.RGBA{0x55, 0x55, 0x55, 0x00},
		color.RGBA{0x55, 0x55, 0xff, 0x00},
		color.RGBA{0x55, 0xff, 0x55, 0x00},
		color.RGBA{0x55, 0xff, 0xff, 0x00},
		color.RGBA{0xff, 0x55, 0x55, 0x00},
		color.RGBA{0xff, 0x55, 0xff, 0x00},
		color.RGBA{0xff, 0xff, 0x55, 0x00},
		color.RGBA{0xff, 0xff, 0xff, 0x00},
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x14, 0x14, 0x14, 0x00},
		color.RGBA{0x20, 0x20, 0x20, 0x00},
		color.RGBA{0x2c, 0x2c, 0x2c, 0x00},
		color.RGBA{0x38, 0x38, 0x38, 0x00},
		color.RGBA{0x45, 0x45, 0x45, 0x00},
		color.RGBA{0x51, 0x51, 0x51, 0x00},
		color.RGBA{0x61, 0x61, 0x61, 0x00},
		color.RGBA{0x71, 0x71, 0x71, 0x00},
		color.RGBA{0x82, 0x82, 0x82, 0x00},
		color.RGBA{0x92, 0x92, 0x92, 0x00},
		color.RGBA{0xa2, 0xa2, 0xa2, 0x00},
		color.RGBA{0xb6, 0xb6, 0xb6, 0x00},
		color.RGBA{0xcb, 0xcb, 0xcb, 0x00},
		color.RGBA{0xe3, 0xe3, 0xe3, 0x00},
		color.RGBA{0xff, 0xff, 0xff, 0x00},
		color.RGBA{0x00, 0x00, 0xff, 0x00},
		color.RGBA{0x41, 0x00, 0xff, 0x00},
		color.RGBA{0x7d, 0x00, 0xff, 0x00},
		color.RGBA{0xbe, 0x00, 0xff, 0x00},
		color.RGBA{0xff, 0x00, 0xff, 0x00},
		color.RGBA{0xff, 0x00, 0xbe, 0x00},
		color.RGBA{0xff, 0x00, 0x7d, 0x00},
		color.RGBA{0xff, 0x00, 0x41, 0x00},
		color.RGBA{0xff, 0x00, 0x00, 0x00},
		color.RGBA{0xff, 0x41, 0x00, 0x00},
		color.RGBA{0xff, 0x7d, 0x00, 0x00},
		color.RGBA{0xff, 0xbe, 0x00, 0x00},
		color.RGBA{0xff, 0xff, 0x00, 0x00},
		color.RGBA{0xbe, 0xff, 0x00, 0x00},
		color.RGBA{0x7d, 0xff, 0x00, 0x00},
		color.RGBA{0x41, 0xff, 0x00, 0x00},
		color.RGBA{0x00, 0xff, 0x00, 0x00},
		color.RGBA{0x00, 0xff, 0x41, 0x00},
		color.RGBA{0x00, 0xff, 0x7d, 0x00},
		color.RGBA{0x00, 0xff, 0xbe, 0x00},
		color.RGBA{0x00, 0xff, 0xff, 0x00},
		color.RGBA{0x00, 0xbe, 0xff, 0x00},
		color.RGBA{0x00, 0x7d, 0xff, 0x00},
		color.RGBA{0x00, 0x41, 0xff, 0x00},
		color.RGBA{0x7d, 0x7d, 0xff, 0x00},
		color.RGBA{0x9e, 0x7d, 0xff, 0x00},
		color.RGBA{0xbe, 0x7d, 0xff, 0x00},
		color.RGBA{0xdf, 0x7d, 0xff, 0x00},
		color.RGBA{0xff, 0x7d, 0xff, 0x00},
		color.RGBA{0xff, 0x7d, 0xdf, 0x00},
		color.RGBA{0xff, 0x7d, 0xbe, 0x00},
		color.RGBA{0xff, 0x7d, 0x9e, 0x00},
		color.RGBA{0xff, 0x7d, 0x7d, 0x00},
		color.RGBA{0xff, 0x9e, 0x7d, 0x00},
		color.RGBA{0xff, 0xbe, 0x7d, 0x00},
		color.RGBA{0xff, 0xdf, 0x7d, 0x00},
		color.RGBA{0xff, 0xff, 0x7d, 0x00},
		color.RGBA{0xdf, 0xff, 0x7d, 0x00},
		color.RGBA{0xbe, 0xff, 0x7d, 0x00},
		color.RGBA{0x9e, 0xff, 0x7d, 0x00},
		color.RGBA{0x7d, 0xff, 0x7d, 0x00},
		color.RGBA{0x7d, 0xff, 0x9e, 0x00},
		color.RGBA{0x7d, 0xff, 0xbe, 0x00},
		color.RGBA{0x7d, 0xff, 0xdf, 0x00},
		color.RGBA{0x7d, 0xff, 0xff, 0x00},
		color.RGBA{0x7d, 0xdf, 0xff, 0x00},
		color.RGBA{0x7d, 0xbe, 0xff, 0x00},
		color.RGBA{0x7d, 0x9e, 0xff, 0x00},
		color.RGBA{0xb6, 0xb6, 0xff, 0x00},
		color.RGBA{0xc7, 0xb6, 0xff, 0x00},
		color.RGBA{0xdb, 0xb6, 0xff, 0x00},
		color.RGBA{0xeb, 0xb6, 0xff, 0x00},
		color.RGBA{0xff, 0xb6, 0xff, 0x00},
		color.RGBA{0xff, 0xb6, 0xeb, 0x00},
		color.RGBA{0xff, 0xb6, 0xdb, 0x00},
		color.RGBA{0xff, 0xb6, 0xc7, 0x00},
		color.RGBA{0xff, 0xb6, 0xb6, 0x00},
		color.RGBA{0xff, 0xc7, 0xb6, 0x00},
		color.RGBA{0xff, 0xdb, 0xb6, 0x00},
		color.RGBA{0xff, 0xeb, 0xb6, 0x00},
		color.RGBA{0xff, 0xff, 0xb6, 0x00},
		color.RGBA{0xeb, 0xff, 0xb6, 0x00},
		color.RGBA{0xdb, 0xff, 0xb6, 0x00},
		color.RGBA{0xc7, 0xff, 0xb6, 0x00},
		color.RGBA{0xb6, 0xff, 0xb6, 0x00},
		color.RGBA{0xb6, 0xff, 0xc7, 0x00},
		color.RGBA{0xb6, 0xff, 0xdb, 0x00},
		color.RGBA{0xb6, 0xff, 0xeb, 0x00},
		color.RGBA{0xb6, 0xff, 0xff, 0x00},
		color.RGBA{0xb6, 0xeb, 0xff, 0x00},
		color.RGBA{0xb6, 0xdb, 0xff, 0x00},
		color.RGBA{0xb6, 0xc7, 0xff, 0x00},
		color.RGBA{0x00, 0x00, 0x71, 0x00},
		color.RGBA{0x1c, 0x00, 0x71, 0x00},
		color.RGBA{0x38, 0x00, 0x71, 0x00},
		color.RGBA{0x55, 0x00, 0x71, 0x00},
		color.RGBA{0x71, 0x00, 0x71, 0x00},
		color.RGBA{0x71, 0x00, 0x55, 0x00},
		color.RGBA{0x71, 0x00, 0x38, 0x00},
		color.RGBA{0x71, 0x00, 0x1c, 0x00},
		color.RGBA{0x71, 0x00, 0x00, 0x00},
		color.RGBA{0x71, 0x1c, 0x00, 0x00},
		color.RGBA{0x71, 0x38, 0x00, 0x00},
		color.RGBA{0x71, 0x55, 0x00, 0x00},
		color.RGBA{0x71, 0x71, 0x00, 0x00},
		color.RGBA{0x55, 0x71, 0x00, 0x00},
		color.RGBA{0x38, 0x71, 0x00, 0x00},
		color.RGBA{0x1c, 0x71, 0x00, 0x00},
		color.RGBA{0x00, 0x71, 0x00, 0x00},
		color.RGBA{0x00, 0x71, 0x1c, 0x00},
		color.RGBA{0x00, 0x71, 0x38, 0x00},
		color.RGBA{0x00, 0x71, 0x55, 0x00},
		color.RGBA{0x00, 0x71, 0x71, 0x00},
		color.RGBA{0x00, 0x55, 0x71, 0x00},
		color.RGBA{0x00, 0x38, 0x71, 0x00},
		color.RGBA{0x00, 0x1c, 0x71, 0x00},
		color.RGBA{0x38, 0x38, 0x71, 0x00},
		color.RGBA{0x45, 0x38, 0x71, 0x00},
		color.RGBA{0x55, 0x38, 0x71, 0x00},
		color.RGBA{0x61, 0x38, 0x71, 0x00},
		color.RGBA{0x71, 0x38, 0x71, 0x00},
		color.RGBA{0x71, 0x38, 0x61, 0x00},
		color.RGBA{0x71, 0x38, 0x55, 0x00},
		color.RGBA{0x71, 0x38, 0x45, 0x00},
		color.RGBA{0x71, 0x38, 0x38, 0x00},
		color.RGBA{0x71, 0x45, 0x38, 0x00},
		color.RGBA{0x71, 0x55, 0x38, 0x00},
		color.RGBA{0x71, 0x61, 0x38, 0x00},
		color.RGBA{0x71, 0x71, 0x38, 0x00},
		color.RGBA{0x61, 0x71, 0x38, 0x00},
		color.RGBA{0x55, 0x71, 0x38, 0x00},
		color.RGBA{0x45, 0x71, 0x38, 0x00},
		color.RGBA{0x38, 0x71, 0x38, 0x00},
		color.RGBA{0x38, 0x71, 0x45, 0x00},
		color.RGBA{0x38, 0x71, 0x55, 0x00},
		color.RGBA{0x38, 0x71, 0x61, 0x00},
		color.RGBA{0x38, 0x71, 0x71, 0x00},
		color.RGBA{0x38, 0x61, 0x71, 0x00},
		color.RGBA{0x38, 0x55, 0x71, 0x00},
		color.RGBA{0x38, 0x45, 0x71, 0x00},
		color.RGBA{0x51, 0x51, 0x71, 0x00},
		color.RGBA{0x59, 0x51, 0x71, 0x00},
		color.RGBA{0x61, 0x51, 0x71, 0x00},
		color.RGBA{0x69, 0x51, 0x71, 0x00},
		color.RGBA{0x71, 0x51, 0x71, 0x00},
		color.RGBA{0x71, 0x51, 0x69, 0x00},
		color.RGBA{0x71, 0x51, 0x61, 0x00},
		color.RGBA{0x71, 0x51, 0x59, 0x00},
		color.RGBA{0x71, 0x51, 0x51, 0x00},
		color.RGBA{0x71, 0x59, 0x51, 0x00},
		color.RGBA{0x71, 0x61, 0x51, 0x00},
		color.RGBA{0x71, 0x69, 0x51, 0x00},
		color.RGBA{0x71, 0x71, 0x51, 0x00},
		color.RGBA{0x69, 0x71, 0x51, 0x00},
		color.RGBA{0x61, 0x71, 0x51, 0x00},
		color.RGBA{0x59, 0x71, 0x51, 0x00},
		color.RGBA{0x51, 0x71, 0x51, 0x00},
		color.RGBA{0x51, 0x71, 0x59, 0x00},
		color.RGBA{0x51, 0x71, 0x61, 0x00},
		color.RGBA{0x51, 0x71, 0x69, 0x00},
		color.RGBA{0x51, 0x71, 0x71, 0x00},
		color.RGBA{0x51, 0x69, 0x71, 0x00},
		color.RGBA{0x51, 0x61, 0x71, 0x00},
		color.RGBA{0x51, 0x59, 0x71, 0x00},
		color.RGBA{0x00, 0x00, 0x41, 0x00},
		color.RGBA{0x10, 0x00, 0x41, 0x00},
		color.RGBA{0x20, 0x00, 0x41, 0x00},
		color.RGBA{0x30, 0x00, 0x41, 0x00},
		color.RGBA{0x41, 0x00, 0x41, 0x00},
		color.RGBA{0x41, 0x00, 0x30, 0x00},
		color.RGBA{0x41, 0x00, 0x20, 0x00},
		color.RGBA{0x41, 0x00, 0x10, 0x00},
		color.RGBA{0x41, 0x00, 0x00, 0x00},
		color.RGBA{0x41, 0x10, 0x00, 0x00},
		color.RGBA{0x41, 0x20, 0x00, 0x00},
		color.RGBA{0x41, 0x30, 0x00, 0x00},
		color.RGBA{0x41, 0x41, 0x00, 0x00},
		color.RGBA{0x30, 0x41, 0x00, 0x00},
		color.RGBA{0x20, 0x41, 0x00, 0x00},
		color.RGBA{0x10, 0x41, 0x00, 0x00},
		color.RGBA{0x00, 0x41, 0x00, 0x00},
		color.RGBA{0x00, 0x41, 0x10, 0x00},
		color.RGBA{0x00, 0x41, 0x20, 0x00},
		color.RGBA{0x00, 0x41, 0x30, 0x00},
		color.RGBA{0x00, 0x41, 0x41, 0x00},
		color.RGBA{0x00, 0x30, 0x41, 0x00},
		color.RGBA{0x00, 0x20, 0x41, 0x00},
		color.RGBA{0x00, 0x10, 0x41, 0x00},
		color.RGBA{0x20, 0x20, 0x41, 0x00},
		color.RGBA{0x28, 0x20, 0x41, 0x00},
		color.RGBA{0x30, 0x20, 0x41, 0x00},
		color.RGBA{0x38, 0x20, 0x41, 0x00},
		color.RGBA{0x41, 0x20, 0x41, 0x00},
		color.RGBA{0x41, 0x20, 0x38, 0x00},
		color.RGBA{0x41, 0x20, 0x30, 0x00},
		color.RGBA{0x41, 0x20, 0x28, 0x00},
		color.RGBA{0x41, 0x20, 0x20, 0x00},
		color.RGBA{0x41, 0x28, 0x20, 0x00},
		color.RGBA{0x41, 0x30, 0x20, 0x00},
		color.RGBA{0x41, 0x38, 0x20, 0x00},
		color.RGBA{0x41, 0x41, 0x20, 0x00},
		color.RGBA{0x38, 0x41, 0x20, 0x00},
		color.RGBA{0x30, 0x41, 0x20, 0x00},
		color.RGBA{0x28, 0x41, 0x20, 0x00},
		color.RGBA{0x20, 0x41, 0x20, 0x00},
		color.RGBA{0x20, 0x41, 0x28, 0x00},
		color.RGBA{0x20, 0x41, 0x30, 0x00},
		color.RGBA{0x20, 0x41, 0x38, 0x00},
		color.RGBA{0x20, 0x41, 0x41, 0x00},
		color.RGBA{0x20, 0x38, 0x41, 0x00},
		color.RGBA{0x20, 0x30, 0x41, 0x00},
		color.RGBA{0x20, 0x28, 0x41, 0x00},
		color.RGBA{0x2c, 0x2c, 0x41, 0x00},
		color.RGBA{0x30, 0x2c, 0x41, 0x00},
		color.RGBA{0x34, 0x2c, 0x41, 0x00},
		color.RGBA{0x3c, 0x2c, 0x41, 0x00},
		color.RGBA{0x41, 0x2c, 0x41, 0x00},
		color.RGBA{0x41, 0x2c, 0x3c, 0x00},
		color.RGBA{0x41, 0x2c, 0x34, 0x00},
		color.RGBA{0x41, 0x2c, 0x30, 0x00},
		color.RGBA{0x41, 0x2c, 0x2c, 0x00},
		color.RGBA{0x41, 0x30, 0x2c, 0x00},
		color.RGBA{0x41, 0x34, 0x2c, 0x00},
		color.RGBA{0x41, 0x3c, 0x2c, 0x00},
		color.RGBA{0x41, 0x41, 0x2c, 0x00},
		color.RGBA{0x3c, 0x41, 0x2c, 0x00},
		color.RGBA{0x34, 0x41, 0x2c, 0x00},
		color.RGBA{0x30, 0x41, 0x2c, 0x00},
		color.RGBA{0x2c, 0x41, 0x2c, 0x00},
		color.RGBA{0x2c, 0x41, 0x30, 0x00},
		color.RGBA{0x2c, 0x41, 0x34, 0x00},
		color.RGBA{0x2c, 0x41, 0x3c, 0x00},
		color.RGBA{0x2c, 0x41, 0x41, 0x00},
		color.RGBA{0x2c, 0x3c, 0x41, 0x00},
		color.RGBA{0x2c, 0x34, 0x41, 0x00},
		color.RGBA{0x2c, 0x30, 0x41, 0x00},
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0x00, 0x00},
		color.RGBA{0x00, 0x00, 0x00, 0x00},
	}
	VGA256Lab, _        = LoadLabPalette("vga256")
	VGA256LinearRGBA, _ = LoadLinearRGBAPalette("vga256")
)
